"""from task to event on the calendar

Revision ID: 26e855a48579
Revises: 9f02b7826df3
Create Date: 2025-03-29 19:47:31.325032+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '26e855a48579'
down_revision: Union[str, None] = '9f02b7826df3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create event_occurrences table without enum types first
    op.create_table('event_occurrences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('calendar_event_id', sa.Integer(), nullable=False),
    sa.Column('occurrence_num', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),  # Temporarily use string
    sa.Column('priority', sa.String(), nullable=True),  # Temporarily use string
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('modified_by_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['calendar_event_id'], ['calendar_events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['modified_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Now alter the columns to use the existing enum types
    op.execute(
        "ALTER TABLE event_occurrences ALTER COLUMN status TYPE taskstatus USING status::taskstatus")
    op.execute(
        "ALTER TABLE event_occurrences ALTER COLUMN priority TYPE taskpriority USING priority::taskpriority")
    
    op.create_index('ix_event_occurrence_due_date', 'event_occurrences', ['due_date'], unique=False)
    op.create_index('ix_event_occurrence_start_date', 'event_occurrences', ['start_date'], unique=False)
    op.create_index('ix_event_occurrence_unique', 'event_occurrences', ['calendar_event_id', 'occurrence_num'], unique=True)
    op.create_index(op.f('ix_event_occurrences_calendar_event_id'), 'event_occurrences', ['calendar_event_id'], unique=False)
    op.create_index(op.f('ix_event_occurrences_id'), 'event_occurrences', ['id'], unique=False)
    op.drop_index('ix_task_occurrence_due_date', table_name='task_occurrences')
    op.drop_index('ix_task_occurrence_start_date', table_name='task_occurrences')
    op.drop_index('ix_task_occurrence_unique', table_name='task_occurrences')
    op.drop_index('ix_task_occurrences_id', table_name='task_occurrences')
    op.drop_index('ix_task_occurrences_task_id', table_name='task_occurrences')
    op.drop_table('task_occurrences')
    
    # Add columns to calendar_events as string types first without defaults
    op.add_column('calendar_events', sa.Column('status', sa.String(), nullable=True))
    op.add_column('calendar_events', sa.Column('priority', sa.String(), nullable=True))
    
    # First set values to ensure no NULL values before making NOT NULL
    op.execute("UPDATE calendar_events SET status = 'TODO' WHERE status IS NULL")
    
    # Then alter them to use the enum types
    op.execute("ALTER TABLE calendar_events ALTER COLUMN status TYPE taskstatus USING status::taskstatus")
    op.execute("ALTER TABLE calendar_events ALTER COLUMN priority TYPE taskpriority USING priority::taskpriority")
    
    # Now make status NOT NULL after conversion is done
    op.execute("ALTER TABLE calendar_events ALTER COLUMN status SET NOT NULL")
    
    # Add default constraint after column type is set
    op.execute("ALTER TABLE calendar_events ALTER COLUMN status SET DEFAULT 'TODO'::taskstatus")
    
    op.add_column('calendar_events', sa.Column('start_date', sa.DateTime(), nullable=False))
    op.add_column('calendar_events', sa.Column('due_date', sa.DateTime(), nullable=True))
    op.add_column('calendar_events', sa.Column('recurrence_custom_days', postgresql.ARRAY(sa.String()), nullable=True))
    
    # Use explicit conversion for interval to float (seconds)
    op.execute("ALTER TABLE calendar_events ALTER COLUMN duration TYPE FLOAT USING EXTRACT(EPOCH FROM duration)")
    
    op.drop_index('ix_calendar_events_start_time', table_name='calendar_events')
    op.create_index('ix_calendar_events_due_date', 'calendar_events', ['due_date'], unique=False)
    op.create_index('ix_calendar_events_priority', 'calendar_events', ['priority'], unique=False)
    op.create_index('ix_calendar_events_start_date', 'calendar_events', ['start_date'], unique=False)
    op.create_index('ix_calendar_events_status', 'calendar_events', ['status'], unique=False)
    op.drop_column('calendar_events', 'start_time')
    op.drop_index('ix_task_recurrence', table_name='tasks')
    op.drop_column('tasks', 'recurrence_custom_days')
    op.drop_column('tasks', 'recurrence')
    op.drop_column('tasks', 'recurrence_end_date')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tasks', sa.Column('recurrence_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('recurrence', postgresql.ENUM('NONE', 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY', name='recurrencetype'), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('recurrence_custom_days', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.create_index('ix_task_recurrence', 'tasks', ['recurrence'], unique=False)
    op.add_column('calendar_events', sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_index('ix_calendar_events_status', table_name='calendar_events')
    op.drop_index('ix_calendar_events_start_date', table_name='calendar_events')
    op.drop_index('ix_calendar_events_priority', table_name='calendar_events')
    op.drop_index('ix_calendar_events_due_date', table_name='calendar_events')
    op.create_index('ix_calendar_events_start_time', 'calendar_events', ['start_time'], unique=False)
    
    # Convert float (seconds) back to interval
    op.execute("ALTER TABLE calendar_events ALTER COLUMN duration TYPE INTERVAL USING (duration || ' seconds')::interval")
    
    op.drop_column('calendar_events', 'recurrence_custom_days')
    op.drop_column('calendar_events', 'due_date')
    op.drop_column('calendar_events', 'start_date')
    
    # Convert enum to string before dropping
    op.execute("ALTER TABLE calendar_events ALTER COLUMN status DROP DEFAULT")
    op.execute("ALTER TABLE calendar_events ALTER COLUMN priority TYPE VARCHAR USING priority::VARCHAR")
    op.execute("ALTER TABLE calendar_events ALTER COLUMN status TYPE VARCHAR USING status::VARCHAR")
    op.drop_column('calendar_events', 'priority')
    op.drop_column('calendar_events', 'status')
    
    # Create task_occurrences with string types for status and priority
    op.create_table('task_occurrences',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('occurrence_num', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('assignee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reviewer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('progress_metrics', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("JSON('{}'::text)"), autoincrement=False, nullable=True),
    sa.Column('blockers', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("JSON('[]'::text)"), autoincrement=False, nullable=True),
    sa.Column('health_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('risk_factors', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assignee_id'], ['users.id'], name='task_occurrences_assignee_id_fkey'),
    sa.ForeignKeyConstraint(['category_id'], ['task_categories.id'], name='task_occurrences_category_id_fkey'),
    sa.ForeignKeyConstraint(['modified_by_id'], ['users.id'], name='task_occurrences_modified_by_id_fkey'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], name='task_occurrences_reviewer_id_fkey'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_occurrences_task_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_occurrences_pkey')
    )
    
    # Alter columns to use enum types
    op.execute(
        "ALTER TABLE task_occurrences ALTER COLUMN status TYPE taskstatus USING status::taskstatus")
    op.execute(
        "ALTER TABLE task_occurrences ALTER COLUMN priority TYPE taskpriority USING priority::taskpriority")
    
    op.create_index('ix_task_occurrences_task_id', 'task_occurrences', ['task_id'], unique=False)
    op.create_index('ix_task_occurrences_id', 'task_occurrences', ['id'], unique=False)
    op.create_index('ix_task_occurrence_unique', 'task_occurrences', ['task_id', 'occurrence_num'], unique=True)
    op.create_index('ix_task_occurrence_start_date', 'task_occurrences', ['start_date'], unique=False)
    op.create_index('ix_task_occurrence_due_date', 'task_occurrences', ['due_date'], unique=False)
    op.drop_index(op.f('ix_event_occurrences_id'), table_name='event_occurrences')
    op.drop_index(op.f('ix_event_occurrences_calendar_event_id'), table_name='event_occurrences')
    op.drop_index('ix_event_occurrence_unique', table_name='event_occurrences')
    op.drop_index('ix_event_occurrence_start_date', table_name='event_occurrences')
    op.drop_index('ix_event_occurrence_due_date', table_name='event_occurrences')
    op.drop_table('event_occurrences')
    # ### end Alembic commands ###
