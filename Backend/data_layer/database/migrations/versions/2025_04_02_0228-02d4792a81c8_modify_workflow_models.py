"""modify workflow models

Revision ID: 02d4792a81c8
Revises: 11aa868694b3
Create Date: 2025-04-02 02:28:52.250259+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '02d4792a81c8'
down_revision: Union[str, None] = '11aa868694b3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('workflow_agent_links', 'workflow_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('workflow_agent_links', 'agent_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('workflow_agent_links', 'interaction_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('workflow_agent_links', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('workflow_executions', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('workflow_step_executions', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('workflow_steps', 'workflow_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('workflow_steps', 'step_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('workflow_steps', 'step_order',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('workflow_steps', 'is_required',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('workflow_steps', 'auto_advance',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('workflow_steps', 'can_revert',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('workflow_steps', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('workflow_transitions', 'from_step_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('workflow_transitions', 'to_step_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('workflow_transitions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('workflows', 'workflow_type',
               existing_type=postgresql.ENUM('SEQUENTIAL', 'PARALLEL', 'CONDITIONAL', 'AI_DRIVEN', 'HYBRID', name='workflowtype'),
               nullable=False)
    op.alter_column('workflows', 'status',
               existing_type=postgresql.ENUM('PENDING', 'ACTIVE', 'PAUSED', 'COMPLETED', 'FAILED', 'CANCELLED', 'ARCHIVED', 'UNDER_REVIEW', 'OPTIMIZING', name='workflowstatus'),
               nullable=False)
    op.alter_column('workflows', 'ai_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('workflows', 'ai_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('workflows', 'status',
               existing_type=postgresql.ENUM('PENDING', 'ACTIVE', 'PAUSED', 'COMPLETED', 'FAILED', 'CANCELLED', 'ARCHIVED', 'UNDER_REVIEW', 'OPTIMIZING', name='workflowstatus'),
               nullable=True)
    op.alter_column('workflows', 'workflow_type',
               existing_type=postgresql.ENUM('SEQUENTIAL', 'PARALLEL', 'CONDITIONAL', 'AI_DRIVEN', 'HYBRID', name='workflowtype'),
               nullable=True)
    op.alter_column('workflow_transitions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('workflow_transitions', 'to_step_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('workflow_transitions', 'from_step_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('workflow_steps', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('workflow_steps', 'can_revert',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('workflow_steps', 'auto_advance',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('workflow_steps', 'is_required',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('workflow_steps', 'step_order',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('workflow_steps', 'step_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('workflow_steps', 'workflow_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('workflow_step_executions', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('workflow_executions', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('workflow_agent_links', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('workflow_agent_links', 'interaction_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('workflow_agent_links', 'agent_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('workflow_agent_links', 'workflow_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    # ### end Alembic commands ###
