"""update workflow_exuction

Revision ID: c8df5e563b93
Revises: eca988440fcf
Create Date: 2025-04-02 04:08:38.408878+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import text  # Import text for SQL expressions

# revision identifiers, used by Alembic.
revision: str = 'c8df5e563b93'
down_revision: Union[str, None] = 'eca988440fcf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if enum type exists before creating it
    connection = op.get_bind()
    result = connection.execute(
        text("SELECT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'stepstatus')")
    ).scalar()
    
    if not result:
        # Create the enum type if it doesn't exist
        op.execute(text("CREATE TYPE stepstatus AS ENUM ('PENDING', 'ACTIVE', 'COMPLETED', 'SKIPPED', 'FAILED')"))
    
    # Now alter the columns with USING clause for proper casting
    op.execute(text("""
        ALTER TABLE workflow_executions 
        ALTER COLUMN status TYPE stepstatus 
        USING status::text::stepstatus
    """))
    
    op.execute(text("""
        ALTER TABLE workflow_step_executions 
        ALTER COLUMN status TYPE stepstatus 
        USING status::text::stepstatus
    """))
    
    # For the remaining columns, we can use the standard approach
    op.alter_column('workflow_steps', 'status',
               existing_type=postgresql.ENUM('pending', 'active', 'completed', 'skipped', 'failed', name='stepstatus'),
               server_default=None,
               existing_nullable=False)
    op.alter_column('workflow_steps', 'version',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=False)
    op.alter_column('workflow_steps', 'average_execution_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=False)
    op.alter_column('workflow_steps', 'success_rate',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('workflow_steps', 'success_rate',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text("'0'::double precision"),
               existing_nullable=False)
    op.alter_column('workflow_steps', 'average_execution_time',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text("'0'::double precision"),
               existing_nullable=False)
    op.alter_column('workflow_steps', 'version',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'1.0.0'::character varying"),
               existing_nullable=False)
    op.alter_column('workflow_steps', 'status',
               existing_type=postgresql.ENUM('pending', 'active', 'completed', 'skipped', 'failed', name='stepstatus'),
               server_default=sa.text("'pending'::stepstatus"),
               existing_nullable=False)
    
    # Use direct SQL for the VARCHAR conversions in downgrade too
    op.execute(text("""
        ALTER TABLE workflow_step_executions 
        ALTER COLUMN status TYPE VARCHAR(50)
        USING status::text
    """))
    
    op.execute(text("""
        ALTER TABLE workflow_executions 
        ALTER COLUMN status TYPE VARCHAR(50)
        USING status::text
    """))
    # ### end Alembic commands ###
