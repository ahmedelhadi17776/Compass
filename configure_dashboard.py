import os
import sys


def set_config_mode(mode):
    """Set dashboard configuration based on predefined modes"""
    configs = {
        "quiet": {
            "ENABLE_REALTIME_UPDATES": "true",
            "UPDATE_THROTTLE_SECONDS": "30",  # 30 seconds between updates
            "BATCH_UPDATES": "true",
            "DASHBOARD_QUIET_MODE": "true",
            "DASHBOARD_DEDUP_WINDOW": "3.0",
            "description": "Quiet mode: Updates every 30 seconds, minimal logging, 3s dedup window"
        },
        "normal": {
            "ENABLE_REALTIME_UPDATES": "true",
            "UPDATE_THROTTLE_SECONDS": "5",   # 5 seconds between updates
            "BATCH_UPDATES": "true",
            "DASHBOARD_QUIET_MODE": "false",
            "DASHBOARD_DEDUP_WINDOW": "2.0",
            "description": "Normal mode: Updates every 5 seconds, balanced logging, 2s dedup window"
        },
        "realtime": {
            "ENABLE_REALTIME_UPDATES": "true",
            "UPDATE_THROTTLE_SECONDS": "0.5",   # 0.5 seconds between updates
            "BATCH_UPDATES": "false",
            "DASHBOARD_QUIET_MODE": "false",
            "DASHBOARD_DEDUP_WINDOW": "0.5",
            "description": "Real-time mode: Updates every 0.5 second, full logging, 0.5s dedup window"
        },
        "instant": {
            "ENABLE_REALTIME_UPDATES": "true",
            "UPDATE_THROTTLE_SECONDS": "0.1",   # 0.1 seconds between updates
            "BATCH_UPDATES": "false",
            "DASHBOARD_QUIET_MODE": "false",
            "DASHBOARD_DEDUP_WINDOW": "0.3",
            "description": "Instant mode: Near-instant updates, 0.3s dedup window (for testing)"
        },
        "disabled": {
            "ENABLE_REALTIME_UPDATES": "false",
            "UPDATE_THROTTLE_SECONDS": "60",
            "BATCH_UPDATES": "true",
            "DASHBOARD_QUIET_MODE": "true",
            "DASHBOARD_DEDUP_WINDOW": "5.0",
            "description": "Disabled mode: No real-time updates, manual refresh only"
        }
    }

    if mode not in configs:
        print(f" Unknown mode: {mode}")
        print(f"Available modes: {', '.join(configs.keys())}")
        return False

    config = configs[mode]
    print(f"üîß Setting dashboard to '{mode}' mode: {config['description']}")

    # Set environment variables
    for key, value in config.items():
        if key != "description":
            os.environ[key] = value
            print(f"   {key}={value}")

    # Write to .env file
    env_lines = []
    env_lines.append(
        f"# Dashboard configured for '{mode}' mode: {config['description']}")
    env_lines.append(f"# Generated by configure_dashboard.py")
    env_lines.append("")

    for key, value in config.items():
        if key != "description":
            env_lines.append(f"{key}={value}")

    with open("dashboard.env", "w") as f:
        f.write("\n".join(env_lines))

    print(f" Configuration saved to dashboard.env")
    print(f" Restart your Python backend to apply changes")
    return True


def show_current_config():
    """Show current configuration"""
    print(" Current Dashboard Configuration:")

    configs = [
        ("ENABLE_REALTIME_UPDATES", "true"),
        ("UPDATE_THROTTLE_SECONDS", "5"),
        ("BATCH_UPDATES", "true"),
        ("DASHBOARD_QUIET_MODE", "false")
    ]

    for key, default in configs:
        value = os.getenv(key, default)
        print(f"   {key}={value}")


def main():
    if len(sys.argv) < 2:
        print(" Dashboard Configuration Helper")
        print()
        print("Usage:")
        print("  python configure_dashboard.py <mode>")
        print()
        print("Available modes:")
        print("  quiet    - Minimal updates every 30 seconds, quiet logging")
        print("  normal   - Balanced updates every 5 seconds (recommended)")
        print("  realtime - Fast updates every 0.5 seconds")
        print("  instant  - Near-instant updates every 0.1 seconds (for testing)")
        print("  disabled - No real-time updates, manual refresh only")
        print("  status   - Show current configuration")
        print()
        print("Examples:")
        print("  python configure_dashboard.py quiet")
        print("  python configure_dashboard.py normal")
        print("  python configure_dashboard.py status")
        return

    mode = sys.argv[1].lower()

    if mode == "status":
        show_current_config()
    elif mode in ["quiet", "normal", "realtime", "instant", "disabled"]:
        if set_config_mode(mode):
            print()
            print("   To apply changes:")
            print("   1. Restart your Python backend")
            print("   2. Reconnect your WebSocket")
    else:
        print(f"‚ùå Unknown mode: {mode}")
        print("Run without arguments to see available modes")


if __name__ == "__main__":
    main()
