"""add_password_reset_table

Revision ID: 907c84e284b3
Revises: ce77738ded48
Create Date: 2024-12-02 12:01:40.652886

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '907c84e284b3'
down_revision: Union[str, None] = 'ce77738ded48'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First drop tables with no dependencies
    tables_to_drop = [
        ('notifications', ['ix_notifications_id']),
        ('user_preferences', ['ix_user_preferences_id']),
        ('task_history', ['ix_task_history_id']),
        ('system_logs', ['idx_system_logs_timestamp', 'idx_system_logs_user_id']),
        ('summarized_contents', ['ix_summarized_contents_id']),
        ('authentication_logs', ['ix_authentication_logs_id']),
        ('device_control_logs', ['idx_device_control_logs_timestamp', 'idx_device_control_logs_user_id']),
        ('task_comments', ['ix_task_comments_id']),
        ('model_usage_logs', ['idx_model_usage_logs_timestamp', 'idx_model_usage_logs_user_id']),
        ('emotional_recognitions', ['idx_emotional_recognitions_timestamp', 'idx_emotional_recognitions_user_id']),
        ('user_settings', []),
        ('web_search_queries', ['idx_web_search_queries_timestamp', 'idx_web_search_queries_user_id']),
        ('task_attachments', ['ix_task_attachments_id']),
        ('health_metrics', ['idx_health_metrics_timestamp', 'idx_health_metrics_user_id']),
        ('files', ['idx_files_created_at', 'idx_files_user_id'])
    ]
    
    # Drop indexes and tables with no dependencies
    for table, indexes in tables_to_drop:
        for index in indexes:
            op.drop_index(index, table_name=table)
        op.drop_table(table)
    
    # Drop task related tables in correct order
    op.drop_index('idx_task_tags_tag_id', table_name='task_tags')
    op.drop_index('idx_task_tags_task_id', table_name='task_tags')
    op.drop_table('task_tags')
    op.drop_index('ix_tags_id', table_name='tags')
    op.drop_table('tags')
    op.drop_index('idx_tasks_created_at', table_name='tasks')
    op.drop_index('idx_tasks_due_date', table_name='tasks')
    op.drop_index('idx_tasks_status_id', table_name='tasks')
    op.drop_index('idx_tasks_user_id', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index('ix_task_status_id', table_name='task_status')
    op.drop_table('task_status')
    op.drop_index('ix_task_categories_id', table_name='task_categories')
    op.drop_table('task_categories')
    op.drop_index('ix_task_priorities_id', table_name='task_priorities')
    op.drop_table('task_priorities')
    
    # Drop workflow related tables in correct order
    op.drop_index('ix_workflow_steps_id', table_name='workflow_steps')
    op.drop_table('workflow_steps')  # Drop steps first as they depend on workflows
    op.drop_index('ix_workflows_id', table_name='workflows')
    op.drop_table('workflows')  # Then drop workflows as they depend on templates
    op.drop_index('ix_workflow_templates_id', table_name='workflow_templates')
    op.drop_table('workflow_templates')  # Finally drop templates

    # Update password_resets table
    op.create_index('idx_password_resets_expires_at', 'password_resets', ['expires_at'], unique=False)
    op.create_index('idx_password_resets_token', 'password_resets', ['token'], unique=False)
    op.create_index('idx_password_resets_user_id', 'password_resets', ['user_id'], unique=False)
    op.drop_constraint('password_resets_user_id_fkey', 'password_resets', type_='foreignkey')
    op.create_foreign_key(None, 'password_resets', 'users', ['user_id'], ['id'], ondelete='CASCADE')

    # Update permissions
    op.drop_constraint('permissions_name_key', 'permissions', type_='unique')
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=True)
    op.drop_column('permissions', 'action')
    op.drop_column('permissions', 'created_at')
    op.drop_column('permissions', 'updated_at')
    op.drop_column('permissions', 'resource')

    # Update role_permissions
    op.drop_index('idx_role_permissions_permission_id', table_name='role_permissions')
    op.drop_index('idx_role_permissions_role_id', table_name='role_permissions')

    # Update roles
    op.drop_constraint('roles_name_key', 'roles', type_='unique')
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.drop_column('roles', 'created_at')
    op.drop_column('roles', 'updated_at')

    # Update user_roles
    op.execute('CREATE SEQUENCE user_roles_id_seq')
    op.execute("ALTER TABLE user_roles ADD COLUMN id INTEGER DEFAULT nextval('user_roles_id_seq')")
    op.execute("ALTER TABLE user_roles ALTER COLUMN id SET NOT NULL")
    op.execute("ALTER SEQUENCE user_roles_id_seq OWNED BY user_roles.id")
    op.drop_index('idx_user_roles_role_id', table_name='user_roles')
    op.drop_index('idx_user_roles_user_id', table_name='user_roles')
    op.create_index(op.f('ix_user_roles_id'), 'user_roles', ['id'], unique=False)

    # Update user_sessions
    op.drop_index('idx_user_sessions_expires_at', table_name='user_sessions')
    op.drop_index('idx_user_sessions_session_token', table_name='user_sessions')
    op.drop_index('idx_user_sessions_user_id', table_name='user_sessions')
    op.drop_constraint('user_sessions_session_token_key', 'user_sessions', type_='unique')
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.drop_column('user_sessions', 'last_activity')

    # Update users
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_constraint('uq_users_email', 'users', type_='unique')
    op.drop_constraint('uq_users_username', 'users', type_='unique')
    op.drop_index('ix_users_email', table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.drop_column('users', 'failed_login_attempts')
    op.drop_column('users', 'is_locked')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'locked_until')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('locked_until', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_locked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('failed_login_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_unique_constraint('uq_users_username', 'users', ['username'])
    op.create_unique_constraint('uq_users_email', 'users', ['email'])
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_users_created_at', 'users', ['created_at'], unique=False)
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.add_column('user_sessions', sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.create_unique_constraint('user_sessions_session_token_key', 'user_sessions', ['session_token'])
    op.create_index('idx_user_sessions_user_id', 'user_sessions', ['user_id'], unique=False)
    op.create_index('idx_user_sessions_session_token', 'user_sessions', ['session_token'], unique=False)
    op.create_index('idx_user_sessions_expires_at', 'user_sessions', ['expires_at'], unique=False)
    op.drop_index(op.f('ix_user_roles_id'), table_name='user_roles')
    op.create_index('idx_user_roles_user_id', 'user_roles', ['user_id'], unique=False)
    op.create_index('idx_user_roles_role_id', 'user_roles', ['role_id'], unique=False)
    op.drop_column('user_roles', 'id')
    op.add_column('roles', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('roles', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.create_unique_constraint('roles_name_key', 'roles', ['name'])
    op.create_index('idx_role_permissions_role_id', 'role_permissions', ['role_id'], unique=False)
    op.create_index('idx_role_permissions_permission_id', 'role_permissions', ['permission_id'], unique=False)
    op.add_column('permissions', sa.Column('resource', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('permissions', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('permissions', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('permissions', sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.create_unique_constraint('permissions_name_key', 'permissions', ['name'])
    op.drop_constraint(None, 'password_resets', type_='foreignkey')
    op.create_foreign_key('password_resets_user_id_fkey', 'password_resets', 'users', ['user_id'], ['id'])
    op.drop_index('idx_password_resets_user_id', table_name='password_resets')
    op.drop_index('idx_password_resets_token', table_name='password_resets')
    op.drop_index('idx_password_resets_expires_at', table_name='password_resets')
    op.create_table('health_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metric_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='health_metrics_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='health_metrics_pkey')
    )
    op.create_index('idx_health_metrics_user_id', 'health_metrics', ['user_id'], unique=False)
    op.create_index('idx_health_metrics_timestamp', 'health_metrics', ['timestamp'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tags_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('color_code', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tags_pkey'),
    sa.UniqueConstraint('name', name='tags_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_tags_id', 'tags', ['id'], unique=False)
    op.create_table('task_attachments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('uploaded_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_attachments_task_id_fkey'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], name='task_attachments_uploaded_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_attachments_pkey')
    )
    op.create_index('ix_task_attachments_id', 'task_attachments', ['id'], unique=False)
    op.create_table('files',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='files_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='files_pkey')
    )
    op.create_index('idx_files_user_id', 'files', ['user_id'], unique=False)
    op.create_index('idx_files_created_at', 'files', ['created_at'], unique=False)
    op.create_table('task_tags',
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='task_tags_tag_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_tags_task_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', 'tag_id', name='task_tags_pkey')
    )
    op.create_index('idx_task_tags_task_id', 'task_tags', ['task_id'], unique=False)
    op.create_index('idx_task_tags_tag_id', 'task_tags', ['tag_id'], unique=False)
    op.create_table('web_search_queries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('query', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='web_search_queries_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='web_search_queries_pkey')
    )
    op.create_index('idx_web_search_queries_user_id', 'web_search_queries', ['user_id'], unique=False)
    op.create_index('idx_web_search_queries_timestamp', 'web_search_queries', ['timestamp'], unique=False)
    op.create_table('task_priorities',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_priorities_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('color_code', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='task_priorities_pkey'),
    sa.UniqueConstraint('name', name='task_priorities_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_task_priorities_id', 'task_priorities', ['id'], unique=False)
    op.create_table('task_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('color_code', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['task_categories.id'], name='task_categories_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_categories_pkey'),
    sa.UniqueConstraint('name', name='task_categories_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_task_categories_id', 'task_categories', ['id'], unique=False)
    op.create_table('task_status',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_status_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('color_code', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='task_status_pkey'),
    sa.UniqueConstraint('name', name='task_status_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_task_status_id', 'task_status', ['id'], unique=False)
    op.create_table('user_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('setting_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('setting_value', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_settings_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_settings_pkey'),
    sa.UniqueConstraint('user_id', 'setting_key', name='uq_user_settings_user_key')
    )
    op.create_table('emotional_recognitions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('emotion', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='emotional_recognitions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='emotional_recognitions_pkey')
    )
    op.create_index('idx_emotional_recognitions_user_id', 'emotional_recognitions', ['user_id'], unique=False)
    op.create_index('idx_emotional_recognitions_timestamp', 'emotional_recognitions', ['timestamp'], unique=False)
    op.create_table('workflow_steps',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('workflow_steps_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('step_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], name='workflow_steps_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='workflow_steps_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_workflow_steps_id', 'workflow_steps', ['id'], unique=False)
    op.create_table('model_usage_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('operation', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('input_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('execution_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='model_usage_logs_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='model_usage_logs_pkey')
    )
    op.create_index('idx_model_usage_logs_user_id', 'model_usage_logs', ['user_id'], unique=False)
    op.create_index('idx_model_usage_logs_timestamp', 'model_usage_logs', ['timestamp'], unique=False)
    op.create_table('workflow_templates',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('workflow_templates_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='workflow_templates_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_workflow_templates_id', 'workflow_templates', ['id'], unique=False)
    op.create_table('task_comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['task_comments.id'], name='task_comments_parent_id_fkey'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_comments_task_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='task_comments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_comments_pkey')
    )
    op.create_index('ix_task_comments_id', 'task_comments', ['id'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('priority_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completion_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actual_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('external_sync_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workflow_step_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint('completion_date > created_at', name='ck_tasks_completion_after_creation'),
    sa.CheckConstraint('due_date > created_at', name='ck_tasks_due_date_after_creation'),
    sa.ForeignKeyConstraint(['category_id'], ['task_categories.id'], name='tasks_category_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['priority_id'], ['task_priorities.id'], name='tasks_priority_id_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['status_id'], ['task_status.id'], name='tasks_status_id_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='tasks_user_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workflow_step_id'], ['workflow_steps.id'], name='tasks_workflow_step_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey'),
    sa.UniqueConstraint('external_sync_id', name='tasks_external_sync_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_tasks_user_id', 'tasks', ['user_id'], unique=False)
    op.create_index('idx_tasks_status_id', 'tasks', ['status_id'], unique=False)
    op.create_index('idx_tasks_due_date', 'tasks', ['due_date'], unique=False)
    op.create_index('idx_tasks_created_at', 'tasks', ['created_at'], unique=False)
    op.create_table('device_control_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='device_control_logs_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='device_control_logs_pkey')
    )
    op.create_index('idx_device_control_logs_user_id', 'device_control_logs', ['user_id'], unique=False)
    op.create_index('idx_device_control_logs_timestamp', 'device_control_logs', ['timestamp'], unique=False)
    op.create_table('workflows',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('workflows_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['template_id'], ['workflow_templates.id'], name='workflows_template_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='workflows_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='workflows_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_workflows_id', 'workflows', ['id'], unique=False)
    op.create_table('authentication_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('login_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('device_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='authentication_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='authentication_logs_pkey')
    )
    op.create_index('ix_authentication_logs_id', 'authentication_logs', ['id'], unique=False)
    op.create_table('summarized_contents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('keywords', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='summarized_contents_task_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='summarized_contents_pkey'),
    sa.UniqueConstraint('task_id', name='summarized_contents_task_id_key')
    )
    op.create_index('ix_summarized_contents_id', 'summarized_contents', ['id'], unique=False)
    op.create_table('system_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='system_logs_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='system_logs_pkey')
    )
    op.create_index('idx_system_logs_user_id', 'system_logs', ['user_id'], unique=False)
    op.create_index('idx_system_logs_timestamp', 'system_logs', ['timestamp'], unique=False)
    op.create_table('task_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('old_value', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_value', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_history_task_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='task_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_history_pkey')
    )
    op.create_index('ix_task_history_id', 'task_history', ['id'], unique=False)
    op.create_table('user_preferences',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('theme', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('notifications_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('accessibility_settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('workflow_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_preferences_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_preferences_pkey'),
    sa.UniqueConstraint('user_id', name='user_preferences_user_id_key')
    )
    op.create_index('ix_user_preferences_id', 'user_preferences', ['id'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='notifications_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_index('ix_notifications_id', 'notifications', ['id'], unique=False)
    # ### end Alembic commands ###
