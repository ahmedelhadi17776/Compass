worker_processes auto;
pid /var/run/nginx/nginx.pid;

events { worker_connections 1024; }

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    client_max_body_size 10M;

    # Set a resolver to Docker's internal DNS
    resolver 127.0.0.11 valid=30s;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log warn;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    server {
        listen 80;
        server_name compass.local;

        # Define variables for upstreams inside the server block
        # to force runtime DNS resolution
        set $go_backend http://api:8000;
        set $python_backend http://backend-python:8001;
        set $notes_server http://notes-server:5000;

        # Handle CORS preflight requests globally
        location @cors {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, X-Organization-ID, x-organization-id, Accept, Origin, Accept-Encoding, Content-Encoding' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            add_header 'Content-Length' '0' always;
            add_header 'Content-Type' 'text/plain' always;
            return 204;
        }

        # Global CORS headers for all responses
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;

        # Health endpoints (Go backend) - EXACT MATCH to avoid conflicts
        location = /health {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass $go_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 10s;
        }

        location = /health/ready {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass $go_backend/health/ready;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 10s;
        }

        location = /metrics {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass $go_backend/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 10s;
        }

        # MCP diagnostic endpoint (Python backend)
        location = /mcp-diagnostic {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass $python_backend/mcp-diagnostic;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 10s;
        }

        # Dashboard WebSocket
        location /ws/ {
            proxy_pass $python_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_read_timeout 86400s;
        }

        # Python Backend API v1 (including reports websocket)
        location ~ ^/api/v1/ {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass $python_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;

            # WebSocket support for /api/v1/ws/...
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400s;
        }

        # Go API routes (main API)
        location /api/ {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass $go_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Organization-ID $http_x_organization_id;
            proxy_set_header x-organization-id $http_x_organization_id;
            proxy_read_timeout 60s;
        }

        # MCP routes (Python backend)
        location /mcp/ {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            proxy_pass $python_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            proxy_read_timeout 120s;
        }

        # Notes server API - strip /notes prefix
        location /notes/ {
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            rewrite ^/notes(.*)$ $1 break;
            proxy_pass $notes_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            # Forward user ID from Go backend if available
            proxy_set_header X-User-Id $http_x_user_id;
            proxy_read_timeout 60s;
        }

        # Static frontend
        location /static/ {
            alias /usr/share/nginx/html/static/;
            try_files $uri $uri/ =404;
        }
        
        # Catch-all frontend route (MUST BE LAST)
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }
    }
} 