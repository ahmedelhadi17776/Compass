syntax = "proto3";

package ai;

option go_package = "github.com/ahmedelhadi17776/Compass/Backend_go/proto/ai";

// AI Service definition
service AIService {
  // Process a natural language query
  rpc ProcessQuery(QueryRequest) returns (QueryResponse) {}
  
  // Generate embeddings for text
  rpc GenerateEmbeddings(EmbeddingRequest) returns (EmbeddingResponse) {}
  
  // Analyze task content
  rpc AnalyzeTask(TaskAnalysisRequest) returns (TaskAnalysisResponse) {}
  
  // Generate workflow recommendations
  rpc GenerateWorkflowRecommendations(WorkflowRequest) returns (WorkflowResponse) {}
  
  // Analyze user productivity
  rpc AnalyzeProductivity(ProductivityRequest) returns (ProductivityResponse) {}
}

// Query request containing user input
message QueryRequest {
  string query = 1;
  int32 user_id = 2;
  map<string, string> context = 3;
  bool use_rag = 4;
}

// Response to a query
message QueryResponse {
  string answer = 1;
  repeated string sources = 2;
  float confidence = 3;
  map<string, string> metadata = 4;
}

// Request to generate embeddings
message EmbeddingRequest {
  repeated string texts = 1;
  string model = 2;
}

// Response with embeddings
message EmbeddingResponse {
  repeated Embedding embeddings = 1;
  
  message Embedding {
    repeated float vector = 1;
    int32 dimension = 2;
  }
}

// Request for task analysis
message TaskAnalysisRequest {
  int32 task_id = 1;
  string title = 2;
  string description = 3;
  string status = 4;
  repeated int32 dependencies = 5;
}

// Response with task analysis
message TaskAnalysisResponse {
  float complexity = 1;
  float estimated_hours = 2;
  repeated string tags = 3;
  repeated string suggested_skills = 4;
  string summary = 5;
}

// Request for workflow recommendations
message WorkflowRequest {
  int32 user_id = 1;
  string workflow_type = 2;
  repeated int32 task_ids = 3;
  map<string, string> parameters = 4;
}

// Response with workflow recommendations
message WorkflowResponse {
  repeated WorkflowStep steps = 1;
  string explanation = 2;
  float efficiency_score = 3;
  
  message WorkflowStep {
    string name = 1;
    string description = 2;
    int32 order = 3;
    repeated int32 task_ids = 4;
    map<string, string> parameters = 5;
  }
}

// Request for productivity analysis
message ProductivityRequest {
  int32 user_id = 1;
  string time_period = 2; // "day", "week", "month"
  repeated CompletedTask completed_tasks = 3;
  
  message CompletedTask {
    int32 task_id = 1;
    string title = 2;
    int64 started_timestamp = 3;
    int64 completed_timestamp = 4;
  }
}

// Response with productivity analysis
message ProductivityResponse {
  float productivity_score = 1;
  map<string, float> metrics = 2;
  repeated string insights = 3;
  repeated string recommendations = 4;
}